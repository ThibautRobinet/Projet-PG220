@startuml
class Legend{ 
+public var
-private var
#protected var
<u>final var</u>
+public fct()
-private fct()
#protected fct()
}
note left
  Ceci n'est pas une classe mais une l√©gende du diagramme
end note

package src.main.java.game{
GameHandle <|-- StandardGameHandle
GameHandle *-- Game
Game *-- Symbols
}

package src.main.java.board{
Board <|-- StandardBoard
Board *-- Column
Game *-- Board
Column *-- Chip
}

package src.main.java.player{
Game *-- Player
Player *-- IA
IA <|-- IASup
Player *-- PlayerType
}

Main *--  GameHandle
GameHandle *-- Game

package src.main.java.information{
GameHandle *-- History
GameHandle *-- UserInterface
Main *--  UserInterface
}

class Main{ 
-GameHandle game
-UserInterface mInterface
-boolean running
+Main()
}

class UserInterface {
+UserInterface()
+void onInputMessage(String userInput)
+void outputMessage(String gameMessage)
} 

class History {
-<u>String LOG_FILE_PATH = "./log.txt"</u> 
+History()
-void newGame()
-void writeNewLine(String line)
+void newManche()
+void playerMove(int playerNum, int column)
+void newPlayer(Player player)
+void playerWin(int playerNum)
+void playersScore(int player1Points, int player2Points)
+void gameEnded()
}

class GameHandle {
-<u>int POINTS_TO_WIN = 2</u>
-int numberOfPlayer
-Game game
-UserInterface mInterface
-History mHisto
+GameHandle(UserInterface mInterface)
#void initGameHandle()
-createPlayers()
-void askingNumberOfPlayers()
-void askingSizeOfBoard()
-void askingWhoIsPlayer(Player player)
-void checkIfPlayerWin(Game mGame)
-boolean checkIfPlayerWin()
-void nextRound()
}
class StandardGameHandle{
+StandardGameHandle()
#@override void initGameHandle()
}

enum Symbols {
"x"
"O"
"#"
"@"
}

class Game {
-int numberOfPlayer
-Board gameBoard
-List<Player> gamePlayer
-int nextPlayerToMove
+Game(int numberOfPlayer, Board mBoard, List<Player> gamePlayers)
+int getNumOfPlayerPlayer()
+Player getNextPlayerToMove()
+void playerHadPlayed()
+Board getBoard()
+boolean isWin(int column)
}

enum PlayerType{
human,
ia
}

class Player {
int numPlayer;
-int score
-String name
-String symbPlayer
-Type playerType
-IA playerIA
+Player(int numPlayer,String symbPlayer, Type playerType )
-int getNumPlayer()
-String getSymbol()
-void setPlayerName(String name)
-String getPlayerName()
-void playerMove(int numeroColumn, Board mBoard)
}

class IA{
+IA()
-void iaMove(Board mBoard)
}

class IASup {
-@orverride void iaMove(Board mBoard)
}

class Board {
+<u>int LEFT = 0b0001</u>
+<u>int RIGHT = 0b0010</u>
+<u>int DOWN = 0b0100</u>
+<u>int UP = 0b1000</u>
-int nbColumns
-int nbLines
-List<Column> columnList
+Board(int nbLines,int nbColumns)
-int getNbLines()
-int getNbColumns()
-Chip getChip(int line, int column)
-void addChip(int numeroColumn, Chip newChip)
+void playerWin()
-int getValue(int line, int column, Symbol s, int direction)
-String toString()#Affichage Custom
}

class StandardBoard {
+Board()
-@Override String toString()#Affichage Standard
}

class Column {
-int nbLines
-List<Chip> chipFilling
+Column(int nbLines)
-void addChip(Chip newChip)
-String toString()
-int getNbLines()
-void cleanColumn()
}

class Chip {
-String Symbol
-String toString()
-String getSymbol()
}
@enduml